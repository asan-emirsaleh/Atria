#!/usr/bin/env julia

# using BioSymbols
# using BioSequences
#
#
# include("apiBioFqRecords.jl")

function julia_wrapper_randtrim(ARGS)

    help_page = """
    usage: atria randtrim [-h] R1_FASTQ R2_FASTQ

    positional arguments:
      R?_FASTQ      input fastqs. caution: raw fastq has to be
                    generated by `atria simulate`.

    optional arguments:
      -h, --help  show this help message and exit
    """

    if "-h" in ARGS || "--help" in ARGS || length(ARGS) == 0 || length(ARGS) % 2 == 1
        println(help_page)
        return 0
    end

    time0 = time()

    npair = length(ARGS)รท2

    for i in 1:npair
        peReadRandomTrim_main(ARGS[2i-1], ARGS[2i])
    end

    @info "read random trim: all done" elapsed=time() - time0
    return 0
end

@inline function random_trim!(r::FqRecord)

    nremain = rand(0:length(r.seq))

    splitted = split(String(copy(r.id)), " ")
    # seq_id = splitted[1]
    true_length = parse(Int64, splitted[2][6:end])
    # insert_size = parse(Int64, splitted[3][13:end])
    # error_rate = parse(Float64, splitted[4][12:end])
    # seq_length = parse(Int64, splitted[5][12:end])
    # error_insert = parse(Int64, splitted[6][14:end])
    # error_adapter = parse(Int64, splitted[7][15:end])

    if nremain < true_length
        splitted[2] = "TRUE=$nremain"
        safe_copyto!(r.id, map(UInt8, collect(join(splitted, " "))))
    end

    resize!(r.seq, nremain)
    # r.qual = view(r.qual, 1:nremain)
    resize!(r.qual, nremain)
end

@inline function random_trim!(r1::FqRecord, r2::FqRecord)
    if rand() < 0.5
        random_trim!(r1)
    else
        random_trim!(r2)
    end
end


function peReadRandomTrim_main(file1::String, file2::String)
    @info "read random trim: start" file1 file2

    for input in [file1,file2]
        if !isfile(input)
            @warn "read random trim: input FASTQ file not valid: skip" FILE=input _module=nothing _group=nothing _id=nothing _file=nothing
            return nothing
        end
    end

    outfile1 = joinpath(replace(file1, r"(fastq$|fq$|[^.]*)(\.gz)?$"i => s"randtrim.\1", count=1))
    outfile2 = joinpath(replace(file2, r"(fastq$|fq$|[^.]*)(\.gz)?$"i => s"randtrim.\1", count=1))

    io1 = open(file1, "r")
    io2 = open(file2, "r")
    io1out = open(outfile1, "w")
    io2out = open(outfile2, "w")

    r1 = FqRecord()
    r2 = FqRecord()

    #================== Read iteration ====================#
    # @label start_loop
    # eof(io1::IO) && @goto stop_loop
    while !eof(io1::IO)
        # read record
        fqreadrecord!(r1::FqRecord, io1::IO)
        fqreadrecord!(r2::FqRecord, io2::IO)

        random_trim!(r1::FqRecord, r2::FqRecord)

        fqwriterecord(io1out::IO, r1::FqRecord)
        fqwriterecord(io2out::IO, r2::FqRecord)

        # @goto start_loop
    end

    @label stop_loop

    #================== Close files ====================#

    close(io1)
    close(io2)
    close(io1out)
    close(io2out)
end
